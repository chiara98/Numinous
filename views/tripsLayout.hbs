<!DOCTYPE html>
<html>
<head>
  <title>Simple Map</title>
  <meta name="viewport" content="initial-scale=1.0">
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.0/build/pure-min.css" integrity="sha384-nn4HPE8lTHyVtfCBi5yW9d20FjT8BJwUXyWZT9InLYax14RDjBj46LmSztkmNP9w" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css?family=Julius+Sans+One|Tangerine|Tenor+Sans" rel="stylesheet">

  <style>

  #map {
    height: 100%;
  }
  html, body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  #trip-button {
    margin-left: 1300px;
    margin-top: -300px;
  }
  .nav {
    height: 60px;
    width: 100%;
    background-color: black;

    position: relative;
  }

  .nav > .nav-header {
    display: inline;
  }

  .nav > .nav-header > .nav-title {
    display: inline-block;
    font-size: 22px;
    color: #fff;
    padding: 10px 10px 10px 50px;
    font-family: 'Julius Sans One', sans-serif;
    font-size: 30px;
    font-weight: bold;

  }

  .nav > .nav-btn {
    display: none;
  }

  .nav > .nav-links {
    display: inline;
    float: right;
    font-size: 18px;
  }

  .nav > .nav-links > a {
    display: inline-block;
    padding: 13px 10px 13px 10px;
    margin-right: 70px;
    text-decoration: none;
    color: #efefef;
    font-family: 'Julius Sans One', sans-serif;
    font-weight: bold;
    font-size: 25px;
  }

  .nav > .nav-links > a:hover {
    background-color: rgba(0, 0, 0, 0.3);
  }

  .nav > #nav-check {
    display: none;
  }

  @media (max-width:600px) {
    .nav > .nav-btn {
      display: inline-block;
      position: absolute;
      right: 0px;
      top: 0px;
    }
    .nav > .nav-btn > label {
      display: inline-block;
      width: 50px;
      height: 50px;
      padding: 15px;
    }
    .nav > .nav-btn > label:hover {
      background-color: rgba(0, 0, 0, 0.3);
    }
    .nav > .nav-btn > label > span {
      display: block;
      width: 25px;
      height: 10px;
      border-top: 2px solid #eee;
    }
    .nav > .nav-links {
      position: absolute;
      display: block;
      width: 100%;
      background-color: #333;
      height: 0px;
      transition: all 0.3s ease-in;
      overflow-y: hidden;
      top: 50px;
      left: 0px;
    }
    .nav > .nav-links > a {
      display: block;
      width: 100%;

    }
    .nav > #nav-check:not(:checked) + .nav-links {
      height: 0px;
    }
    .nav > #nav-check:checked + .nav-links {
      height: calc(100vh - 50px);
      overflow-y: auto;
    }
  }



  </style>

</head>

<body>
  <div class="nav">
  <div class="nav-header">
    <div class="nav-title">
      Numinous
    </div>
  </div>
  <div class="nav-btn">
    <label for="nav-check">
      <span></span>
      <span></span>
      <span></span>
    </label>
  </div>
  <input type="checkbox" id="nav-check">
  <div class="nav-links">
    <a href="/users/new" target="_self">Sign up</a>
    <a href="/trips/new" target="_self">Home</a>
  </div>
</div>


  <input type="hidden" id="hiddenLocation" data-add="{{city1}}" value="{{trip.starting_city}}">
  <input type="hidden" id="hiddenLocation" data-add="{{city2}}" value="{{trip.ending_city}}">
  <input type="hidden" id="hiddenLocation" data-add="{{city3}}" value="{{trip.middle_city1}}">
  <input type="hidden" id="hiddenLocation" data-add="{{city4}}" value="{{trip.middle_city2}}">
  <input type="hidden" id="hiddenLocation" data-add="{{city5}}" value="{{trip.middle_city3}}">
  <div id="map">  </div>
  <div id="right-panel">
     <p>Total Distance: <span id="total"></span></p>
     <p> Total Days: <span id="totalDays"></span></p>
     <p> Amount of Days In Each City: <span id="city1Days"></span></p>


     <button id="printButton"> Preview itinerary </button>
     <form action="/trips/new" method="get">
     <button id="trip-button"> Go back </button>
   </form>


   </div>

   <input type="hidden" id="hiddenDate" data-add="{{date1}}" value="{{trip.starting_Date}}">
   <input type="hidden" id="hiddenDate" data-add="{{date1}}" value="{{trip.ending_Date}}">

   <!-- background-color: #0005;
text-shadow: 2px 2px black; -->

<script>
const date1 = new Date("{{date1}}");
console.log(date1);
const date2 = new Date("{{date2}}");
const timeDiff = Math.abs(date2.getTime() - date1.getTime());
const diffDays = Math.round(timeDiff/ (1000 * 3600 *24));
const equalDays = diffDays/5;
document.getElementById('city1Days').innerHTML = equalDays;
document.getElementById('totalDays').innerHTML = diffDays;
</script>






 <script>

 function printDisplay() {
   window.print();

 }

 document.getElementById("printButton").addEventListener("click", printDisplay);



 </script>



  <script>

    function initMap() {

      var address = '{{city1}}'
      var geocoder = new google.maps.Geocoder();


      geocoder.geocode({ 'address' : address}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          var latitude = results[0].geometry.location.lat();
          var longitude = results[0].geometry.location.lng();
        }


        console.log(latitude);
        console.log(longitude);
        var myLatLng = {lat: latitude, lng: longitude};
        map = new google.maps.Map(document.getElementById('map'), {
          center: myLatLng,
          zoom: 5
        });
        var contentString = `<div id = "content">
        <div id= "sideNotice" >
        </div>
        <h1 id= "firstHeading" class = "firstHeading"> {{city1}} </h1>
        </div>
        </div>`;

        var infoWindow = new google.maps.InfoWindow({
            content: contentString
          });
        var marker = new google.maps.Marker({
          position: myLatLng,
          map: map,


        });
        marker.addListener('click', function() {
          infoWindow.open(marker.get('map'), marker);
        })

      });


      var address2 = '{{city2}}'
      var geocoder1 = new google.maps.Geocoder();

      geocoder1.geocode({ 'address' : address2}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          var latitude = results[0].geometry.location.lat();
          var longitude = results[0].geometry.location.lng();
        }
        console.log(latitude);
        console.log(longitude);
        var myLatLng1 = {lat: latitude, lng: longitude};
        var contentString = `<div id = "content">
        <div id= "sideNotice" >
        </div>
        <h1 id= "firstHeading" class = "firstHeading"> {{city2}} </h1>

        </div>
        </div>`;

        var infoWindow = new google.maps.InfoWindow({
            content: contentString
          });
        var marker = new google.maps.Marker({
          position: myLatLng1,
          map: map,
        });
        marker.addListener('click', function() {
          infoWindow.open(marker.get('map'), marker);
        })

    });

    var address3 = '{{city3}}'
    var geocoder2 = new google.maps.Geocoder();

    geocoder2.geocode({ 'address' : address3}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        var latitude = results[0].geometry.location.lat();
        var longitude = results[0].geometry.location.lng();
      }
      console.log(latitude);
      console.log(longitude);
      var contentString = `<div id = "content">
      <div id= "sideNotice" >
      </div>
      <h1 id= "firstHeading" class = "firstHeading"> {{city3}} </h1>
      </div>
      </div>`;

      var infoWindow = new google.maps.InfoWindow({
          content: contentString
        });
      var myLatLng2 = {lat: latitude, lng: longitude};
      var marker = new google.maps.Marker({
        position: myLatLng2,
        map: map,
      });
      marker.addListener('click', function() {
        infoWindow.open(marker.get('map'), marker);
      })

  });
  var address4 = '{{city4}}'
  var geocoder3 = new google.maps.Geocoder();

  geocoder3.geocode({ 'address' : address4}, function(results, status) {
    if (status == google.maps.GeocoderStatus.OK) {
      var latitude = results[0].geometry.location.lat();
      var longitude = results[0].geometry.location.lng();
    }
    console.log(latitude);
    console.log(longitude);
    var myLatLng3 = {lat: latitude, lng: longitude};
    var marker = new google.maps.Marker({
      position: myLatLng3,
      map: map,
    });
    var contentString = `<div id = "content">
    <div id= "sideNotice" >
    </div>
    <h1 id= "firstHeading" class = "firstHeading"> {{city4}} </h1>
    </div>
    </div>`;

    var infoWindow = new google.maps.InfoWindow({
        content: contentString
      });
      marker.addListener('click', function() {
        infoWindow.open(marker.get('map'), marker);
      })

  });
  var address5 = '{{city5}}'
  var geocoder4 = new google.maps.Geocoder();
  geocoder4.geocode({ 'address' : address5}, function(results, status) {
    if (status == google.maps.GeocoderStatus.OK) {
      var latitude = results[0].geometry.location.lat();
      var longitude = results[0].geometry.location.lng();
    }
    console.log(latitude);
    console.log(longitude);
    var contentString = `<div id = "content">
    <div id= "sideNotice" >
    </div>
    <h1 id= "firstHeading" class = "firstHeading"> {{city5}} </h1>
    </div>
    </div>`;

    var infoWindow = new google.maps.InfoWindow({
        content: contentString
      });
    var myLatLng4 = {lat: latitude, lng: longitude};
    var marker = new google.maps.Marker({
      position: myLatLng4,
      map: map,
    });
    marker.addListener('click', function() {
      infoWindow.open(marker.get('map'), marker);
    })

  });
  var directionsService = new google.maps.DirectionsService;
  var directionsDisplay = new google.maps.DirectionsRenderer({
    map: map,
    panel: document.getElementById('right-panel'),

  });
  directionsDisplay.addListener('directions_changed', function() {
           computeTotalDistance(directionsDisplay.getDirections());
         });

         displayRoute('{{city1}}', '{{city2}}', directionsService,
             directionsDisplay);

       function displayRoute(origin, destination, service, display) {
         service.route({
           origin: origin,
           destination: destination,
           waypoints: [{location: '{{city3}}'}, {location: '{{city4}}'}, {location: '{{city5}}' }],
           travelMode: 'DRIVING',
           avoidTolls: true,
           optimizeWaypoints: true
         }, function(response, status) {
           if (status === 'OK') {
             display.setDirections(response);
           } else {
             alert('Could not display directions due to: ' + status);
           }
         });

       }
       function computeTotalDistance(result) {
         var total = 0;
         var myroute = result.routes[0];
         for (var i = 0; i < myroute.legs.length; i++) {
           total += myroute.legs[i].distance.value;
         }
         total = total / 1000;
         document.getElementById('total').innerHTML = total + ' km';
       }



  }
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBgRJTVpOmuCRP5KWnJWcLz-10QgB0BTkw&callback=initMap"
  async defer></script>
</body>
</html>





<!--
  </script> -->
